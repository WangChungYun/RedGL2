[
  {
    "code": "METHOD",
    "title": "addChild",
    "description": "자식추가",
    "params": {
      "child": [
        {
          "type": "RedBaseObject3D Instance"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).addChild( RedBaseObject3D Instance );\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "addChildAt",
    "description": "인덱스 위치에 자식을 추가",
    "params": {
      "child": [
        {
          "type": "RedBaseObject3D Instance"
        }
      ],
      "index": [
        {
          "type": "uint"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).addChildAt( RedBaseObject3D Instance, 0 ); // 0번째에 자식추가\n    (RedBaseContainer Instance).addChildAt( RedBaseObject3D Instance, 2 ); // 2번째에 자식추가\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "getChildAt",
    "description": "해당위치의 자식을 반환",
    "params": {
      "index": [
        {
          "type": "uint"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).getChildAt( 0 ); // 0번째 자식 반환\n    (RedBaseContainer Instance).getChildAt( 2 ); // 2번째 자식 반환\n ",
    "return": "RedBaseObject3D Instance"
  },
  {
    "code": "METHOD",
    "title": "getChildIndex",
    "description": "해당객체의 인덱스 번호를 반환",
    "params": {
      "child": [
        {
          "type": "RedBaseObject3D Instance"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).getChildIndex( RedBaseObject3D Instance ); // 해당객체가 부모메쉬의 몇번째 자식인지 인덱스 반환\n ",
    "return": "int"
  },
  {
    "code": "METHOD",
    "title": "numChildren",
    "description": "자식갯수 반환",
    "params": {
      "target": [
        {
          "type": "RedBaseObject3D Instance"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).numChildren(); // 자식갯수 반환\n ",
    "return": "uint"
  },
  {
    "constructorYn": true,
    "title": "RedBaseContainer",
    "description": "\n\t RedBaseContainer 기저층.\n\t children 관리층.\n ",
    "extends": [
      "RedBaseObject3D"
    ],
    "return": "RedBaseContainer Instance"
  },
  {
    "code": "METHOD",
    "title": "removeChild",
    "description": "\n    해당 자식을 제거.\n    존재하지 않는 자식을 제거하려고 할 경우 에러.\n ",
    "params": {
      "child": [
        {
          "type": "RedBaseObject3D Instance"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).removeChild( RedBaseObject3D Instance ); // 해당 자식 제거\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "removeChildAll",
    "description": "전체 자식을 제거",
    "example": "\n    (RedBaseContainer Instance).removeChildAll(); // 전체 자식 제거\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "removeChildAt",
    "description": "인덱스 위치에 있는 자식을 제거",
    "params": {
      "index": [
        {
          "type": "uint"
        }
      ]
    },
    "example": "\n    (RedBaseContainer Instance).removeChildAt( 0 ); // 0번째 자식 제거\n    (RedBaseContainer Instance).removeChildAt( 1 ); // 1번째 자식 제거\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "sortGeometry",
    "description": "\n    지오메트리 순으로 자식들을 정렬.\n    동일 지오메트리가 다량 사용될 경우 attribute 변경 횟수가 줄어들어 렌더성능이 좋아진다.\n       ",
    "params": {
      "recursive": [
        {
          "type": "Boolean"
        },
        "true 입력시 하위 자식의 children 까지 모두 정렬"
      ]
    },
    "example": "\n    (RedBaseContainer Instance).sortGeometry();\n    (RedBaseContainer Instance).sortGeometry(true);\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "sortGeometryAndMaterial",
    "description": "지오메트리/재질순으로 자식들을 정렬",
    "params": {
      "recursive": [
        {
          "type": "Boolean"
        },
        "true 입력시 하위 자식의 children 까지 모두 정렬"
      ]
    },
    "example": "\n    (RedBaseContainer Instance).sortGeometryAndMaterial();\n    (RedBaseContainer Instance).sortGeometryAndMaterial(true);\n ",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "sortMaterial",
    "description": "\n    재질이 소유한 RedProgram 순으로 자식들을 정렬.\n    동일 재질이 다량 사용될 경우 프로그램 변경 횟수가 줄어들어 렌더성능이 좋아진다.\n       ",
    "params": {
      "recursive": [
        {
          "type": "Boolean"
        },
        "true 입력시 하위 자식의 children 까지 모두 정렬"
      ]
    },
    "example": "\n    (RedBaseContainer Instance).sortMaterial();\n    (RedBaseContainer Instance).sortMaterial(true);\n ",
    "return": "void"
  }
]