[
  {
    "code": "METHOD",
    "title": "addView",
    "description": "getViewList",
    "params": {
      "redView": [
        {
          "type": "RedView"
        },
        "추가할 RedView Instance"
      ],
      "key": [
        {
          "type": "String"
        },
        "키 등록시 고유키로 동작하고 미등록시 무시함"
      ]
    },
    "example": "\n\t var testWorld = RedWorld(); // 월드생성\n\t var testView = RedView( RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t testWorld.addView( testView ); // 뷰등록\n",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "delView",
    "description": "고유키 기반 or RedView 인스턴스 기반 뷰 삭제",
    "params": {
      "value": [
        {
          "type": "String or RedView"
        },
        "고유키"
      ]
    },
    "example": "\n\t var testWorld = RedWorld(); // 월드생성\n\t var testView = RedView( RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t testWorld.addView( testView ); // 뷰등록\n\t console.log( testWorld.getView('뷰이름') ); // testView 반환\n\t testWorld.delView('뷰이름');\n\t console.log( testWorld.getView('뷰이름') ); // undefined 반환\n",
    "return": "void"
  },
  {
    "code": "METHOD",
    "title": "getView",
    "description": "고유키 기반 뷰 검색",
    "params": {
      "key": [
        {
          "type": "String"
        },
        "고유키"
      ]
    },
    "example": "\n\t var testWorld = RedWorld(); // 월드생성\n\t var testView = RedView( RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t testWorld.addView( testView ); // 뷰등록\n\t console.log( testWorld.getView('뷰이름') ); // testView 반환\n\t testWorld.delView('뷰이름');\n\t console.log( testWorld.getView('뷰이름') ); // undefined 반환\n",
    "return": "RedView"
  },
  {
    "code": "METHOD",
    "title": "getViewList",
    "description": "고유키 기반 렌더정보 검색",
    "params": {
      "value": [
        {
          "type": "String"
        },
        "고유키"
      ]
    },
    "example": "\n\t var testWorld = RedWorld(); // 월드생성\n\t var testView = RedView( RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t var testView2 = RedView(  RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t testWorld.addView( testView ); // 뷰등록\n\t testWorld.addView( testView2 ); // 뷰등록\n\t console.log(testWorld.getViewList()); // 뷰리스트 반환\n",
    "return": "Array"
  },
  {
    "code": "METHOD",
    "title": "hasView",
    "description": "고유키 기반 or RedView 인스턴스 기반 존재여부 반환.",
    "params": {
      "value": [
        {
          "type": "String"
        },
        "고유키"
      ]
    },
    "example": "\n\t var testWorld = RedWorld(); // 월드생성\n\t var testView = RedView( RedGL Instance, RedScene Instance, RedCamera Instance ); // 뷰생성\n\t testWorld.addView( testView ); // 뷰등록\n\t console.log(testWorld.hasView('뷰이름')) // true 반환\n",
    "return": "Boolean"
  },
  {
    "constructorYn": true,
    "title": "RedWorld",
    "description": "\n\t RedWorld Instance 생성자.\n\t RedGL Instance 에 설정가능함.\n\t RedView 목록을 관리함.\n\t RedWorld 내의 RedView 를 렌더링 대상으로 함.\n ",
    "demo": "../example/etc/RedWorld.html",
    "example": "\n\t RedWorld(); // RedWorld Instance 생성\n ",
    "return": "RedWorld Instance"
  }
]